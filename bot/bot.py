import os
import logging
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, 
    CallbackContext, MessageHandler, Filters,
    ConversationHandler
)

from handlers import (
    format_transaction, 
    normalize_address
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = 'http://rpc-proxy:8000'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
CHOOSING, TYPING_ADDRESS, ADDRESS_SELECTED = range(3)

class EthereumTelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ethereum —á–µ—Ä–µ–∑ Telegram Bot"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞"""
        self.updater = Updater(token=API_TOKEN)
        self.dispatcher = self.updater.dispatcher
        self.api_base_url = API_URL
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dispatcher.add_handler(CommandHandler('start', self.start_command))
        self.dispatcher.add_handler(CommandHandler('help', self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ callback_query
        self.dispatcher.add_handler(CallbackQueryHandler(self.handle_button_press))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
        self.dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command,
            self.handle_text_input
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error_handler)
        
        logger.info("Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ await, —Ç–∞–∫ –∫–∞–∫ start_polling - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        self.updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    def notify_user_about_transaction(self, chat_id, tx_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        response = requests.post(f"{self.api_base_url}/get_transaction", json={"tx_id": tx_id})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {json_response['error']}")
        else:
            tx = json_response.get('transaction', {})
            pending = json_response.get('pending', False)
            confirmed = json_response.get('confirmed', False)
            message = format_transaction(tx_id, tx)
            print(tx_id)
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_tx_{tx_id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_tx_{tx_id}")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pending_transactions")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            self.updater.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup, parse_mode='Markdown')
           
    def start_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        user_id = str(update.effective_user.id)
        chat_id = str(update.effective_chat.id)
        
        try:
            response = requests.post(f"{self.api_base_url}/new_user", json={"user_id": user_id, "chat_id": chat_id})
            json_response = response.json()
            if json_response.get('error'):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {str(e)}")
            return {"error": str(e)}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        keyboard = [
            [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏", callback_data="manage_addresses")],
            [InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="pending_transactions")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π proxy RPC {os.environ.get('EXTERNAL_RPC_URL')} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é {os.environ.get('CHAIN_NAME')}.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏'.\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –Ω–∞ –≤–∞—à–∏—Ö –∞–¥—Ä–µ—Å–∞—Ö –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
    
    def help_command(self, update: Update, context: CallbackContext) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "üöÄ *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n\n"
            "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏* ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ EVM –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ *–û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏* ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö —Å –≤–∞—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    def handle_button_press(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        query.answer()
        
        callback_data = query.data
        user_id = str(update.effective_user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {callback_data}")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        response = requests.post(f"{self.api_base_url}/get_user_id", json={"user_id": user_id})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
        else:
            logger.info(json_response)
            user_id = json_response.get('user_id')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–∞–∑—ã")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if callback_data == "main_menu":
            self.show_main_menu(query)
        elif callback_data == "manage_addresses":
            self.show_address_menu(query)
        elif callback_data == "pending_transactions":
            self.show_pending_transactions(query)
        elif callback_data == "help":
            self.show_help(query)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏
        elif callback_data == "add_address":
            self.request_address_input(query)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
            context.user_data['awaiting_input'] = 'address'
        elif callback_data == "list_addresses":
            self.list_user_addresses(query, user_id)
        elif callback_data == "remove_address_menu":
            self.show_remove_address_menu(query, user_id)
        elif callback_data.startswith("remove_address_"):
            address = callback_data.replace("remove_address_", "")
            self.remove_user_address(query, user_id, address)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        elif callback_data.startswith("confirm_tx_"):
            tx_id = callback_data.replace("confirm_tx_", "")
            self.process_transaction_action(query, tx_id, "confirm")
        elif callback_data.startswith("reject_tx_"):
            tx_id = callback_data.replace("reject_tx_", "")
            self.process_transaction_action(query, tx_id, "reject")
        elif callback_data.startswith("details_tx_"):
            tx_id = callback_data.replace("details_tx_", "")
            self.show_transaction_details(query, tx_id)
        elif callback_data == "back_to_address_menu":
            self.show_address_menu(query)
        else:
            query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    
    def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏", callback_data="manage_addresses")],
            [InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="pending_transactions")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "üöÄ *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π proxy RPC {os.environ.get('EXTERNAL_RPC_URL')} –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é {os.environ.get('CHAIN_NAME')}.\n\n"
            "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏* ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ EVM –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ *–û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏* ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è* ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö —Å –≤–∞—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    def show_address_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="add_address")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="remove_address_menu")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤", callback_data="list_addresses")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def request_address_input(self, query):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ Ethereum –∞–¥—Ä–µ—Å–∞"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_address_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ EVM –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `0x742d35Cc6634C0532925a3b844Bc454e4438f44e`",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    def list_user_addresses(self, query, user_id):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = requests.post(f"{self.api_base_url}/get_user_addresses", json={"user_id": user_id})
        json_response = response.json()
        logger.info(f"–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response}")
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
        else:
            addresses = json_response.get('addresses', [])
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_addresses")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if not addresses:
            text = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å'."
        else:
            text = "üîë *–í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:*\n\n"
            for address in addresses:
                text += f"`{address}`\n"
        
        query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    def show_remove_address_menu(self, query, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
        response = requests.post(f"{self.api_base_url}/get_user_addresses", json={"user_id": user_id})
        json_response = response.json()
        logger.info(f"–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response}")
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
        else:
            addresses = json_response.get('addresses', [])
        
        if not addresses:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_addresses")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.",
                reply_markup=reply_markup
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        keyboard = []
        for address in addresses:
            # –û–±—Ä–µ–∑–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è callback_data, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É
            short_addr = address[:10] + "..." + address[-8:]
            keyboard.append([InlineKeyboardButton(short_addr, callback_data=f"remove_address_{address}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_addresses")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def remove_user_address(self, query, user_id, address):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = requests.post(f"{self.api_base_url}/remove_address", json={"user_id": user_id, "address": address})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
            text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            text = f"‚úÖ –ê–¥—Ä–µ—Å {address} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_addresses")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
    
    def handle_text_input(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(update.effective_user.id)
        text = update.message.text
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        response = requests.post(f"{self.api_base_url}/new_user", json={"user_id": user_id, "chat_id": str(update.message.chat_id)})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
            update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥
        awaiting_input = context.user_data.get('awaiting_input')
        
        if awaiting_input == 'address':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ Ethereum –∞–¥—Ä–µ—Å–∞
            self.process_address_input(update, context)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['awaiting_input'] = None
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            keyboard = [
                [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏", callback_data="manage_addresses")],
                [InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="pending_transactions")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
    
    def process_address_input(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Ethereum-–∞–¥—Ä–µ—Å–∞"""
        user_id = str(update.effective_user.id)
        chat_id = str(update.effective_chat.id)
        message_text = update.message.text
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
            try:
                address = normalize_address(message_text)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {address}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}")
                update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EVM-–∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            if not address:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: {message_text}")
                update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç EVM-–∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                response = requests.post(f"{self.api_base_url}/add_address", json={"user_id": user_id, "address": address})
                json_response = response.json()
                if json_response.get('error'):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
                    update.message.reply_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}"
                    )
                else:
                    logger.info(f"–ê–¥—Ä–µ—Å {address} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = requests.post(f"{self.api_base_url}/get_user_addresses", json={"user_id": user_id})
                json_response = response.json()
                logger.info(f"–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response}")
                if json_response.get('error'):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
                    update.message.reply_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}"
                    )
                else:
                    addresses = json_response.get('addresses', [])
                    if not addresses:
                        address_list = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤."
                    else:
                        address_list = "\n".join([f"‚Ä¢ `{addr}`" for addr in addresses])
                
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–¥—Ä–µ—Å", callback_data="add_address")],
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="remove_address")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–∞–º–∏
                address_list = "\n".join([f"‚Ä¢ `{addr}`" for addr in addresses]) if addresses else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤."
                
                update.message.reply_text(
                    f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–í–∞—à–∏ –∞–¥—Ä–µ—Å–∞:\n{address_list}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {address} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞: {str(e)}")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def show_pending_transactions(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        user_id = str(query.from_user.id)
               
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        transactions = []
        response = requests.post(f"{self.api_base_url}/get_pending_transactions", json={"user_id": user_id})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {json_response['error']}")
            update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}"
            )
        else:
            transactions = json_response.get('transactions', [])
            if not transactions:
                keyboard = [
                    # [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_transactions")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    reply_markup=reply_markup
                )
            else:
                # –í—ã–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                for transaction in transactions:
                    tx_id = transaction
                    tx_data = requests.post(f"{self.api_base_url}/get_transaction", json={"tx_id": tx_id})
                    json_response = tx_data.json()
                    if json_response.get('error'):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {json_response['error']}")
                    else:
                        tx = json_response.get('transaction', {})
                        pending = json_response.get('pending', False)
                        confirmed = json_response.get('confirmed', False)
                        
                    formatted_tx = format_transaction(tx_id, tx)
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
                    chat_id = query.effective_chat.id
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_tx_{tx_id}"),
                         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_tx_{tx_id}")
                        ],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pending_transactions")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    self.updater.bot.send_message(
                        chat_id=chat_id,
                        text=formatted_tx,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
        
    
    def process_transaction_action(self, query, tx_id, action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)"""
        if action == "confirm":
            try:
                response = requests.post(f"{self.api_base_url}/confirm-transaction", json={"tx_id": tx_id})
                json_response = response.json()
                if json_response.get('error'):
                    success_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}"
                else:
                    success_message = "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω!"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {str(e)}")
                success_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        
        elif action == "reject":
            try:
                response = requests.post(f"{self.api_base_url}/reject-transaction", json={"tx_id": tx_id})
                json_response = response.json()
                if json_response.get('error'):
                    success_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {json_response['error']}"
                else:
                    success_message = "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {str(e)}")
                success_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        else:
            success_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="pending_transactions")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        query.edit_message_text(
            success_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def show_transaction_details(self, query, tx_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        response = requests.post(f"{self.api_base_url}/get_transaction", json={"tx_id": tx_id})
        json_response = response.json()
        if json_response.get('error'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_id}: {json_response['error']}")
            return
        else:
            tx = json_response.get('transaction', {})
            pending = json_response.get('pending', False)
            confirmed = json_response.get('confirmed', False)
            
            if pending:
                status = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            elif confirmed:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            else:
                status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            formatted_tx = format_transaction(tx_id, tx)
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_tx_{tx_id}"),
                 InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_tx_{tx_id}")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pending_transactions")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                f"üìù *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ({tx_id})*\n\n{formatted_tx}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    
    def error_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_chat:
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.effective_chat.send_message(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            ) 