import logging
import json
from typing import Dict, Any, List, Optional
from datetime import datetime
from web3.auto import w3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def normalize_address(address):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç Ethereum –∞–¥—Ä–µ—Å"""
    return w3.to_checksum_address(address)


def format_transaction(tx_id, tx_data, simulation_result=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    method = tx_data.get('method') if isinstance(tx_data, dict) else 'Unknown'
    
    formatted_text = f"üîî *–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è*\n\n"
    formatted_text += f"*ID:* `0x{tx_data.get('tx_hash')}`\n"
    formatted_text += f"*–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* `{tx_data.get('from')}`\n"
    if tx_data.get('to') == 'None' or tx_data.get('to') == None:
        formatted_text += f"üìÑ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!*\n"
    else:
        formatted_text += f"*–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* `{tx_data.get('to')}`\n"
    formatted_text += f"*–°—É–º–º–∞:* `{tx_data.get('value')}`\n"
    formatted_text += f"*–ì–∞–∑:* `{tx_data.get('gas')}`\n"
    formatted_text += f"*–¶–µ–Ω–∞ –≥–∞–∑–∞:* `{tx_data.get('gasPrice')}`\n"
    if len(tx_data.get('input', '')) > 2000:
        formatted_text += f"*–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ):* `{tx_data.get('input')[:20]}...`\n"
    else:
        formatted_text += f"*–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:* `{tx_data.get('input')}`\n"
    formatted_text += f"*Nonce:* `{tx_data.get('nonce')}`\n"
    formatted_text += f"*Chain ID:* `{tx_data.get('chainId')}`\n"
    formatted_text += f"\n"
    for log in tx_data.get('logs', []):
        formatted_text += f"*–õ–æ–≥ ‚Ññ:* `{log.get('logIndex')}`\n"
        formatted_text += f"*–ê–¥—Ä–µ—Å:* `{log.get('address')}`\n"
        formatted_text += f"*–¢–æ–ø–∏–∫–∏:* `{log.get('topics')}`\n"
        formatted_text += f"*–î–∞–Ω–Ω—ã–µ:* `{log.get('data', '')}`\n\n"
        if log.get('decoded'):
            formatted_text += f"*–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
            formatted_text += f"*–°–æ–±—ã—Ç–∏–µ:* `{log['decoded'].get('event')}`\n"
            formatted_text += f"*–ê—Ä–≥—É–º–µ–Ω—Ç—ã:* `{log['decoded'].get('args')}`\n"
            if log['decoded'].get('event') == 'Transfer':
                # TODO: –±—Ä–∞—Ç—å decimals –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                formatted_text += f"üí∏ *–ü–µ—Ä–µ–≤–æ–¥* `{w3.from_wei(log['decoded'].get('args').get('value'), 'ether') if log['decoded'].get('args').get('value') else '0'} —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {log.get('address')} –Ω–∞ –∞–¥—Ä–µ—Å {log['decoded'].get('args').get('to')}`\n"
        formatted_text += f"\n"

    formatted_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."
    return formatted_text
